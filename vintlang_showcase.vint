// VintLang Showcase: Personal Information Manager
// A comprehensive demonstration of VintLang capabilities

import time
import os
import json
import uuid

print("üöÄ VintLang Personal Information Manager")
print("=" * 50)
print("Showcasing VintLang's real-world capabilities")
print("=" * 50)

// Step 1: Data Generation and JSON Handling
print("\nüìä Step 1: Data Generation and JSON Operations")
print("-" * 50)

let contacts = [
    {
        "id": uuid.generate(),
        "name": "Alice Johnson",
        "email": "alice@example.com",
        "phone": "+1-555-0101",
        "category": "Work",
        "created": time.format(time.now(), "2006-01-02")
    },
    {
        "id": uuid.generate(),
        "name": "Bob Smith",
        "email": "bob@example.com", 
        "phone": "+1-555-0102",
        "category": "Personal",
        "created": time.format(time.now(), "2006-01-02")
    },
    {
        "id": uuid.generate(),
        "name": "Carol Davis",
        "email": "carol@company.com",
        "phone": "+1-555-0103", 
        "category": "Work",
        "created": time.format(time.now(), "2006-01-02")
    }
]

print("‚úì Generated " + string(len(contacts)) + " contact records")
print("‚úì Each contact has unique UUID: " + contacts[0]["id"])

// Step 2: File I/O Operations
print("\nüíæ Step 2: File I/O Operations")
print("-" * 50)

let contactsJson = json.encode(contacts)
os.writeFile("contacts.json", contactsJson)
print("‚úì Saved contacts to JSON file")

let loadedData = os.readFile("contacts.json")
let loadedContacts = json.decode(loadedData)
print("‚úì Loaded and verified " + string(len(loadedContacts)) + " contacts")

// Step 3: Data Analysis
print("\nüîç Step 3: Data Analysis")
print("-" * 50)

let categoryCount = {}
for contact in loadedContacts {
    let category = contact["category"]
    if (!categoryCount.hasKey(category)) {
        categoryCount[category] = 0
    }
    categoryCount[category] += 1
}

print("Contact distribution by category:")
for category, count in categoryCount {
    print("  " + category + ": " + string(count) + " contacts")
}

// Step 4: Advanced String Operations
print("\nüìù Step 4: String Processing")
print("-" * 50)

for contact in contacts {
    let name = contact["name"]
    let nameParts = name.split(" ")
    let firstName = nameParts[0]
    let lastName = nameParts[1]
    
    print("Processing: " + name)
    print("  First: " + firstName + ", Last: " + lastName)
    print("  Email domain: " + contact["email"].split("@")[1])
    print("  Phone area: " + contact["phone"].split("-")[1])
    print("")
}

// Step 5: Report Generation
print("\nüìã Step 5: Report Generation")
print("-" * 50)

let reportTime = time.format(time.now(), "2006-01-02 15:04:05")
let report = "PERSONAL INFORMATION MANAGER REPORT\n"
report += "Generated: " + reportTime + "\n"
report += "=" * 50 + "\n\n"

report += "SUMMARY\n"
report += "-------\n"
report += "Total Contacts: " + string(len(contacts)) + "\n"

for category, count in categoryCount {
    report += category + " Contacts: " + string(count) + "\n"
}

report += "\nCONTACT DETAILS\n"
report += "---------------\n"
for contact in contacts {
    report += "Name: " + contact["name"] + "\n"
    report += "Email: " + contact["email"] + "\n"
    report += "Phone: " + contact["phone"] + "\n"
    report += "Category: " + contact["category"] + "\n"
    report += "ID: " + contact["id"] + "\n"
    report += "Created: " + contact["created"] + "\n"
    report += "\n"
}

report += "=" * 50 + "\n"
report += "Report generated by VintLang PIM v1.0\n"

let reportFile = "contact_report_" + time.format(time.now(), "2006-01-02_15-04-05") + ".txt"
os.writeFile(reportFile, report)
print("‚úì Generated comprehensive report: " + reportFile)

// Step 6: CSV Export
print("\nüìä Step 6: CSV Export")
print("-" * 50)

let csvContent = "ID,Name,Email,Phone,Category,Created\n"
for contact in contacts {
    csvContent += contact["id"] + ","
    csvContent += contact["name"] + ","
    csvContent += contact["email"] + ","
    csvContent += contact["phone"] + ","
    csvContent += contact["category"] + ","
    csvContent += contact["created"] + "\n"
}

let csvFile = "contacts_export_" + time.format(time.now(), "2006-01-02_15-04-05") + ".csv"
os.writeFile(csvFile, csvContent)
print("‚úì Exported data to CSV format: " + csvFile)

// Step 7: Configuration Management
print("\n‚öôÔ∏è Step 7: Configuration Management")
print("-" * 50)

let config = {
    "app_name": "VintLang PIM",
    "version": "1.0.0",
    "created": time.format(time.now(), "2006-01-02 15:04:05"),
    "features": [
        "Contact Management",
        "Data Analysis", 
        "Report Generation",
        "CSV Export",
        "JSON Processing"
    ],
    "settings": {
        "auto_backup": true,
        "data_format": "json",
        "report_format": "txt"
    },
    "statistics": {
        "total_contacts": len(contacts),
        "categories": len(categoryCount),
        "last_updated": time.format(time.now(), "2006-01-02 15:04:05")
    }
}

os.writeFile("config.json", json.encode(config))
print("‚úì Created configuration file with app settings")

// Step 8: Directory Listing and File Management
print("\nüìÅ Step 8: File Management")
print("-" * 50)

let files = os.listDir(".")
let fileList = files.split(", ")
let generatedFiles = []

for filename in fileList {
    if (filename.contains("contact") || filename.contains("config") || filename.contains(".json") || filename.contains(".csv") || filename.contains(".txt")) {
        if (os.fileExists(filename)) {
            let content = os.readFile(filename)
            print("üìÑ " + filename + " (" + string(len(content)) + " bytes)")
            generatedFiles.push(filename)
        }
    }
}

print("‚úì Generated " + string(len(generatedFiles)) + " files during demonstration")

// Step 9: Final Summary and Statistics
print("\nüéâ Step 9: Final Summary")
print("-" * 50)

print("VintLang Personal Information Manager completed successfully!")
print("")
print("üìä DEMONSTRATION STATISTICS:")
print("  ‚Ä¢ Contacts processed: " + string(len(contacts)))
print("  ‚Ä¢ Files generated: " + string(len(generatedFiles)))
print("  ‚Ä¢ Categories analyzed: " + string(len(categoryCount)))
print("  ‚Ä¢ UUIDs generated: " + string(len(contacts)))
print("  ‚Ä¢ JSON operations: 4 (encode/decode)")
print("  ‚Ä¢ String operations: " + string(len(contacts) * 3))
print("")

print("‚ú® VINTLANG FEATURES DEMONSTRATED:")
print("  ‚úì UUID Generation - Unique identifiers for all records")
print("  ‚úì Time Operations - Timestamps and formatting")
print("  ‚úì JSON Processing - Encoding and decoding data")
print("  ‚úì File I/O - Reading and writing multiple file types")
print("  ‚úì String Manipulation - Splitting, processing text")
print("  ‚úì Data Structures - Arrays and dictionaries")
print("  ‚úì Control Flow - Loops and conditionals")
print("  ‚úì Directory Operations - File listing and management")
print("  ‚úì Report Generation - Formatted text output")
print("  ‚úì CSV Export - Data format conversion")
print("")

print("üöÄ VintLang is production-ready for:")
print("  ‚Ä¢ Data processing applications")
print("  ‚Ä¢ File management systems") 
print("  ‚Ä¢ Report generation tools")
print("  ‚Ä¢ Configuration management")
print("  ‚Ä¢ Business automation scripts")
print("  ‚Ä¢ API data processing")
print("  ‚Ä¢ Log analysis tools")
print("")

print("üéØ This demonstration proves VintLang's capability")
print("   to handle real-world programming challenges!")

print("\n" + "=" * 50)
print("üèÜ VintLang Showcase Complete!")
print("=" * 50)