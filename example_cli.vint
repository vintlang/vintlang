// Example: A simple CLI tool that processes files
// Usage: vint example_cli.vint input.txt --output result.txt --verbose --format json

import cli

// Get all command line arguments
let allArgs = args()
println("All arguments:", allArgs)

// Get positional arguments (non-flags)
let positional = cli.getPositional()
println("Positional arguments:", positional)

// Check if help was requested
if (cli.hasArg("--help") || cli.hasArg("-h")) {
    println("Usage: vint example_cli.vint <input_file> [options]")
    println("Options:")
    println("  --output <file>    Output file (default: stdout)")
    println("  --format <format>  Output format: json, csv, txt (default: txt)")
    println("  --verbose, -v      Enable verbose output")
    println("  --help, -h         Show this help message")
    exit(0)
}

// Get input file from positional arguments
let inputFile = "stdin"
if (len(positional) > 0) {
    inputFile = positional[0]
}

// Get output file from flags
let outputFile = cli.getArgValue("--output")
if (!outputFile) {
    outputFile = "stdout"
}

// Get format
let format = cli.getArgValue("--format")
if (!format) {
    format = "txt"
}

// Check for verbose mode
let verbose = cli.hasArg("--verbose") || cli.hasArg("-v")

// Display configuration
println("\nProcessing configuration:")
println("Input file:", inputFile)
println("Output file:", outputFile)
println("Format:", format)
println("Verbose mode:", verbose)

if (verbose) {
    println("\nVerbose: Processing", inputFile, "->", outputFile, "in", format, "format")
}

println("\nâœ“ CLI argument parsing working correctly!")
