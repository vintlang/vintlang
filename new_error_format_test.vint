// Enhanced Error Testing for Vint Core Modules
// This file demonstrates the improved error messages using ErrorMessage helper

import cli
import os
import net
import math
import time
import crypto
import colors

println("=== Testing New ErrorMessage Format ===")

// CLI Module Tests
println("\n--- CLI Module Error Tests ---")

// Test with wrong number of arguments
println("Testing cli.prompt() with wrong argument count:")
let result1 = cli.prompt("Enter name:", "extra arg")
println("Result type:", type(result1))

// Test with wrong argument type
println("\nTesting cli.hasArg() with wrong type:")
let result2 = cli.hasArg(123)
println("Result type:", type(result2))

// OS Module Tests
println("\n--- OS Module Error Tests ---")

// Test with wrong number of arguments
println("Testing os.run() with wrong argument count:")
let result3 = os.run("ls", "extra")
println("Result type:", type(result3))

// Test with wrong type
println("\nTesting os.getEnv() with wrong type:")
let result4 = os.getEnv(123)
println("Result type:", type(result4))

// Math Module Tests
println("\n--- Math Module Error Tests ---")

// Test with wrong argument type
println("Testing math.abs() with wrong type:")
let result5 = math.abs("not a number")
println("Result type:", type(result5))

// Test with wrong number of arguments
println("\nTesting math.abs() with wrong argument count:")
let result6 = math.abs(5, 10)
println("Result type:", type(result6))

// Time Module Tests
println("\n--- Time Module Error Tests ---")

// Test with arguments when none expected
println("Testing time.now() with unexpected arguments:")
let result7 = time.now("unexpected")
println("Result type:", type(result7))

// Test with wrong argument type
println("\nTesting time.sleep() with wrong type:")
let result8 = time.sleep("not a number")
println("Result type:", type(result8))

// Crypto Module Tests
println("\n--- Crypto Module Error Tests ---")

// Test with wrong argument count
println("Testing crypto.hashMD5() with wrong argument count:")
let result9 = crypto.hashMD5("data", "extra")
println("Result type:", type(result9))

// Test with wrong type
println("\nTesting crypto.hashSHA256() with wrong type:")
let result10 = crypto.hashSHA256(123)
println("Result type:", type(result10))

// Colors Module Tests
println("\n--- Colors Module Error Tests ---")

// Test with wrong argument count
println("Testing colors.rgbToHex() with wrong argument count:")
let result11 = colors.rgbToHex(255, 128)
println("Result type:", type(result11))

// Test with wrong type
println("\nTesting colors.rgbToHex() with wrong type:")
let result12 = colors.rgbToHex("not", "a", "number")
println("Result type:", type(result12))

// Test with out of range values
println("\nTesting colors.rgbToHex() with out of range values:")
let result13 = colors.rgbToHex(300, 128, 64)
println("Result type:", type(result13))

println("\n=== Error Testing Complete ===")
println("All enhanced error messages are working with the new ErrorMessage format!")
println("Notice the consistent formatting with colors, expected/received details, and usage examples.")
