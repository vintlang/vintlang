import { app, BrowserWindow, ipcMain, dialog, Menu, MenuItem, MenuItemConstructorOptions } from 'electron';
import fs from 'fs'
import os from 'os'
import path from 'path'
import Store from 'electron-store';
import { get_files, menuTemplate } from './lib/menuTemplates';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const SELECTED_FOLDER_STORE_NAME = 'selected-folder'
const store = new Store();

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow: BrowserWindow;

const isMac = process.platform === 'darwin'


const menu = Menu.buildFromTemplate(menuTemplate)
Menu.setApplicationMenu(menu)



ipcMain.handle('get-folder', async (event, data) => {
  // @ts-ignore
  return store.get(SELECTED_FOLDER_STORE_NAME)
})

ipcMain.on('clear-folder', () => {
  // @ts-ignore 
  store.delete(SELECTED_FOLDER_STORE_NAME)
})

ipcMain.on('create-file', async (event, data) => {
  //   path: data.path,
  // fileName: string
  //   rootPath:  data.rootPath
  
  const new_file = fs.writeFileSync(data.path, '')

  const tree = get_files(data.rootPath)
  const structure = {
    // name: path.dirname(data.rootPath),
    name: data.rootPath,
    root: data.rootPath,
    tree,
  }  
  // @ts-ignore
  store.set(SELECTED_FOLDER_STORE_NAME, structure)

  const newfile = {
    name: data.fileName,
    parentPath: data.path,
    path: data.path,
    is_dir: false
  }

  event.sender.send('command-update-folder-structure', newfile)
})

ipcMain.handle('get-file-content', async (event, path) => {
  const file_content = fs.readFileSync(path, 'utf8')
  return file_content
})

ipcMain.on('folder-contextmenu', async (event, data) => {
  const template = [
    {
      label: 'Open to the Side...',
      visible: data.type == 'file',
    },
    {
      label: 'Open with...',
      visible: data.type == 'file'
    },
    {
      label: 'New File...',
      click: () => { event.sender.send('command-create-file', data) },
      visible: data.type == 'folder',
     
    },
    {
      label: 'New Folder...',
      visible: data.type == 'folder'
    },
    {
      label: 'Reveal in Finder',
      visible: os.platform() == 'darwin'
    },
    {
      label: 'Open in Integrated Terminal',
    },
    { type: 'separator' },
    { 
      label: 'New Java File',  
      visible: data.type == 'folder',
      submenu: [
        {label: 'Class...'},
        {label: 'Interface...'},
        {label: 'Enum...'},
        {label: 'Record...'},
        {label: 'Annotation...'},
        {label: 'Abstract Class...'},
      ]
    },
    {
      label: 'New Java Package...',
      visible: data.type == 'folder',
    },
    {
      label: 'New Java Project...',
      visible: data.type == 'folder',
    },
    { 
      label: 'Maven',  
      submenu: [
        {label: 'New Project...', visible: data.type == 'folder'},
        {label: 'New Module...'},
      ]
    },
    { type: 'separator', },
    {
      label: 'Select for Compare',
      visible: data.type == 'file',
    },
    {
      label: 'Find in Folder',
      visible: data.type == 'folder',
      role: 'fileMenu'
    },
    { type: 'separator', visible: data.type == 'file', },
    {
      label: 'Find File References',
      visible: data.type == 'file',
    },
    { type: 'separator', visible: data.type == 'file', },
    {
      label: 'Open Timeline',
      visible: data.type == 'file',
    },
    { type: 'separator' },
    {
      label: 'Cut',
      role: 'cut'
    },
    {
      label: 'Copy',
      role: 'copy'
    },
    {
      label: 'Paste',
      enabled: false,
      role: 'paste'
    },
    { type: 'separator' },
    {
      label: 'Copy Path',
      role: 'copy'
    },
    {
      label: 'Copy Relative Path'
    },
    { type: 'separator' },
    { label: 'Rename', 'role': 'editMenu' },
    { label: 'Delete', role: 'delete' },
  ] as MenuItem[]

  const menu = Menu.buildFromTemplate(template)
  menu.popup({ window: BrowserWindow.fromWebContents(event.sender), })
})

ipcMain.on('save-file', async (event, data) => {
  const file_content = fs.writeFileSync(data.path, data.content)
  console.log("file writen");  
})

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 700,
    width: 900,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
    frame: true,
  });

  // mainWindow.setWindowButtonPosition()
  os.platform() == 'darwin' && mainWindow.setWindowButtonVisibility(true);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  ipcMain.handle('open-folder', async (event, data) => {
    const folder = await dialog.showOpenDialog(mainWindow, {properties: ['openDirectory']})
    let structure = undefined;
    if (!folder.canceled) {
      console.log("folder", folder.filePaths[0]);
      const tree = get_files(folder.filePaths[0])
      structure = {
        // name: path.dirname(folder.filePaths[0]),
        name: folder.filePaths[0],
        root: folder.filePaths[0],
        tree,
      }  
      // @ts-ignore
      store.set(SELECTED_FOLDER_STORE_NAME, structure)
    }

    return structure;    
  })

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

