// VintLang Showcase: Advanced Data Processing & Analytics Tool
// This demonstrates VintLang's real-world capabilities

import time
import os
import json
import uuid
import net

// Application configuration
let config = {
    "name": "VintLang Data Processor",
    "version": "1.0.0",
    "dataDir": "data",
    "outputDir": "output"
}

// Ensure directories exist
let setupDirectories = func() {
    if (!os.fileExists(config["dataDir"])) {
        os.makeDir(config["dataDir"])
        print("‚úì Created data directory")
    }
    if (!os.fileExists(config["outputDir"])) {
        os.makeDir(config["outputDir"])
        print("‚úì Created output directory")
    }
}

// Generate sample data for demonstration
let generateSampleData = func() {
    print("\nüìä Generating sample data...")
    
    let categories = ["Technology", "Science", "Business", "Health", "Education"]
    let priorities = ["Low", "Medium", "High", "Critical"]
    let statuses = ["Active", "Pending", "Completed", "Cancelled"]
    
    let sampleData = []
    
    // Generate 50 sample records
    for i in range(1, 51) {
        let record = {
            "id": uuid.generate(),
            "name": "Record " + string(i),
            "category": categories[(i - 1) % len(categories)],
            "priority": priorities[(i - 1) % len(priorities)],
            "status": statuses[(i - 1) % len(statuses)],
            "value": (i * 123) % 1000,
            "score": (i * 7) % 100,
            "timestamp": time.format(time.now(), "2006-01-02 15:04:05"),
            "tags": ["tag" + string(i % 3), "sample", "data"]
        }
        sampleData.push(record)
    }
    
    // Save to JSON file
    let dataFile = config["dataDir"] + "/sample_data.json"
    os.writeFile(dataFile, json.encode(sampleData))
    print("‚úì Generated " + string(len(sampleData)) + " sample records")
    print("‚úì Saved to: " + dataFile)
    
    return sampleData
}

// Load data from file
let loadData = func(filename) {
    let filepath = config["dataDir"] + "/" + filename
    if (!os.fileExists(filepath)) {
        print("‚ùå File not found: " + filepath)
        return []
    }
    
    let content = os.readFile(filepath)
    return json.decode(content)
}

// Data analysis functions
let analyzeByCategory = func(data) {
    print("\nüìà Analysis by Category:")
    print("-" * 40)
    
    let categoryStats = {}
    let categoryValues = {}
    
    for record in data {
        let category = record["category"]
        
        // Count records per category
        if (!categoryStats.hasKey(category)) {
            categoryStats[category] = 0
            categoryValues[category] = 0
        }
        categoryStats[category] += 1
        categoryValues[category] += record["value"]
    }
    
    // Display statistics
    for category, count in categoryStats {
        let avgValue = categoryValues[category] / count
        print(category + ":")
        print("  Records: " + string(count))
        print("  Total Value: " + string(categoryValues[category]))
        print("  Average Value: " + string(avgValue))
        print("")
    }
    
    return categoryStats
}

let analyzeByStatus = func(data) {
    print("\nüìä Analysis by Status:")
    print("-" * 40)
    
    let statusStats = {}
    
    for record in data {
        let status = record["status"]
        if (!statusStats.hasKey(status)) {
            statusStats[status] = 0
        }
        statusStats[status] += 1
    }
    
    let total = len(data)
    for status, count in statusStats {
        let percentage = (count * 100) / total
        print(status + ": " + string(count) + " (" + string(percentage) + "%)")
    }
    
    return statusStats
}

let findTopPerformers = func(data) {
    print("\nüèÜ Top Performers by Score:")
    print("-" * 40)
    
    // Sort data by score (simple bubble sort for demonstration)
    let sortedData = data
    for i in range(0, len(sortedData) - 1) {
        for j in range(0, len(sortedData) - i - 1) {
            if (sortedData[j]["score"] < sortedData[j + 1]["score"]) {
                let temp = sortedData[j]
                sortedData[j] = sortedData[j + 1]
                sortedData[j + 1] = temp
            }
        }
    }
    
    // Display top 10
    let topCount = 10
    if (len(sortedData) < topCount) {
        topCount = len(sortedData)
    }
    
    for i in range(0, topCount) {
        let record = sortedData[i]
        print(string(i + 1) + ". " + record["name"] + 
              " (Score: " + string(record["score"]) + 
              ", Category: " + record["category"] + ")")
    }
    
    return sortedData
}

let generateReport = func(data, categoryStats, statusStats) {
    print("\nüìù Generating comprehensive report...")
    
    let reportTime = time.format(time.now(), "2006-01-02_15-04-05")
    let reportFile = config["outputDir"] + "/analysis_report_" + reportTime + ".txt"
    
    let report = "VINTLANG DATA ANALYSIS REPORT\n"
    report += "Generated: " + time.format(time.now(), "02-01-2006 15:04:05") + "\n"
    report += "=" * 50 + "\n\n"
    
    // Summary
    report += "SUMMARY\n"
    report += "-" * 20 + "\n"
    report += "Total Records: " + string(len(data)) + "\n"
    
    let totalValue = 0
    let totalScore = 0
    for record in data {
        totalValue += record["value"]
        totalScore += record["score"]
    }
    let avgValue = totalValue / len(data)
    let avgScore = totalScore / len(data)
    
    report += "Total Value: " + string(totalValue) + "\n"
    report += "Average Value: " + string(avgValue) + "\n"
    report += "Average Score: " + string(avgScore) + "\n\n"
    
    // Category breakdown
    report += "CATEGORY BREAKDOWN\n"
    report += "-" * 20 + "\n"
    for category, count in categoryStats {
        let percentage = (count * 100) / len(data)
        report += category + ": " + string(count) + " (" + string(percentage) + "%)\n"
    }
    
    report += "\nSTATUS BREAKDOWN\n"
    report += "-" * 20 + "\n"
    for status, count in statusStats {
        let percentage = (count * 100) / len(data)
        report += status + ": " + string(count) + " (" + string(percentage) + "%)\n"
    }
    
    report += "\n" + "=" * 50 + "\n"
    report += "Report generated by " + config["name"] + " v" + config["version"] + "\n"
    report += "Powered by VintLang Programming Language\n"
    
    os.writeFile(reportFile, report)
    print("‚úì Report saved to: " + reportFile)
}

// Web data fetching demonstration
let fetchWebData = func() {
    print("\nüåê Fetching data from web...")
    
    // Try to fetch from a simple API
    let url = "https://httpbin.org/json"
    let response = net.get(url)
    
    if (response != "") {
        print("‚úì Successfully fetched data from: " + url)
        
        // Save response to file
        let webDataFile = config["dataDir"] + "/web_data.json"
        os.writeFile(webDataFile, response)
        print("‚úì Web data saved to: " + webDataFile)
        
        return true
    } else {
        print("‚ùå Failed to fetch web data")
        return false
    }
}

// Export data in different formats
let exportData = func(data, format) {
    let timestamp = time.format(time.now(), "2006-01-02_15-04-05")
    
    if (format == "json") {
        let filename = config["outputDir"] + "/export_" + timestamp + ".json"
        os.writeFile(filename, json.encode(data))
        print("‚úì Data exported to JSON: " + filename)
    } else if (format == "csv") {
        let filename = config["outputDir"] + "/export_" + timestamp + ".csv"
        let csvContent = "ID,Name,Category,Priority,Status,Value,Score,Timestamp\n"
        
        for record in data {
            csvContent += record["id"] + ","
            csvContent += record["name"] + ","
            csvContent += record["category"] + ","
            csvContent += record["priority"] + ","
            csvContent += record["status"] + ","
            csvContent += string(record["value"]) + ","
            csvContent += string(record["score"]) + ","
            csvContent += record["timestamp"] + "\n"
        }
        
        os.writeFile(filename, csvContent)
        print("‚úì Data exported to CSV: " + filename)
    }
}

// Main application
let runDataProcessor = func() {
    print("üöÄ Welcome to " + config["name"] + " v" + config["version"])
    print("=" * 60)
    print("This showcase demonstrates VintLang's capabilities for:")
    print("  ‚Ä¢ Data generation and processing")
    print("  ‚Ä¢ JSON manipulation and file I/O")
    print("  ‚Ä¢ Statistical analysis and reporting")
    print("  ‚Ä¢ Web data fetching")
    print("  ‚Ä¢ Multiple export formats")
    print("  ‚Ä¢ Directory management")
    print("  ‚Ä¢ Time and UUID operations")
    print("=" * 60)
    
    // Setup
    setupDirectories()
    
    // Generate or load data
    let data = generateSampleData()
    
    // Perform analysis
    let categoryStats = analyzeByCategory(data)
    let statusStats = analyzeByStatus(data)
    let topPerformers = findTopPerformers(data)
    
    // Generate report
    generateReport(data, categoryStats, statusStats)
    
    // Export data
    exportData(data, "json")
    exportData(data, "csv")
    
    // Try web data fetching
    fetchWebData()
    
    print("\nüéâ Data processing complete!")
    print("üìÅ Check the '" + config["outputDir"] + "' directory for generated files")
    print("üìÅ Source data available in '" + config["dataDir"] + "' directory")
    
    // Final summary
    print("\nüìä FINAL SUMMARY:")
    print("  ‚Ä¢ Processed " + string(len(data)) + " records")
    print("  ‚Ä¢ Analyzed " + string(len(categoryStats)) + " categories")
    print("  ‚Ä¢ Generated comprehensive report")
    print("  ‚Ä¢ Exported data in multiple formats")
    print("  ‚Ä¢ Demonstrated web data fetching")
    
    print("\n‚ú® VintLang successfully demonstrated real-world data processing!")
}

// Start the application
runDataProcessor()