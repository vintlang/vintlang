// examples/all_new_functions_demo.vint
// Comprehensive demonstration of all new built-in functions added to VintLang

println("üéâ Welcome to VintLang Enhanced Built-in Functions Demo! üéâ\n")

// ==================================================
// MATH FUNCTIONS
// ==================================================
println("üìä MATH FUNCTIONS")
println("================")

let numbers = [-5, 3.14, -2.7, 0, 42]
println("Working with numbers:", numbers)

for num in numbers {
    println("abs(" + string(num) + ") =", abs(num))
}

println("\nComparisons:")
println("min(10, 5, 15, 3) =", min(10, 5, 15, 3))
println("max(10, 5, 15, 3) =", max(10, 5, 15, 3))

println("\nRounding functions:")
let floatNum = 3.14159
println("Original:", floatNum)
println("round(" + string(floatNum) + ") =", round(floatNum))
println("floor(" + string(floatNum) + ") =", floor(floatNum))
println("ceil(" + string(floatNum) + ") =", ceil(floatNum))
println("sqrt(16) =", sqrt(16))

// ==================================================
// STRING FUNCTIONS
// ==================================================
println("\nüìù STRING FUNCTIONS")
println("===================")

let sampleText = "  Hello VintLang World!  "
println("Original text: '" + sampleText + "'")
println("upper() =", upper(sampleText))
println("lower() =", lower(sampleText))
println("trim() = '" + trim(sampleText) + "'")

let text = "VintLang Programming"
println("\nText analysis on: '" + text + "'")
println("contains('Lang') =", contains(text, "Lang"))
println("startsWith('Vint') =", startsWith(text, "Vint"))
println("endsWith('ming') =", endsWith(text, "ming"))

// ==================================================
// ARRAY FUNCTIONS
// ==================================================
println("\nüìã ARRAY FUNCTIONS")
println("==================")

let fruits = ["banana", "apple", "cherry", "date", "elderberry"]
println("Original fruits:", fruits)
println("Sorted fruits:", sort(fruits))
println("Reversed fruits:", reverse(fruits))
println("indexOf('cherry') =", indexOf(fruits, "cherry"))

let scores = []
for i in range(5) {
    scores = append(scores, randInt(60, 100))
}
println("\nRandom test scores:", scores)
println("Sorted scores:", sort(scores))
println("Contains score >= 90?", contains(scores, 90) || contains(scores, 91) || contains(scores, 92) || contains(scores, 93) || contains(scores, 94) || contains(scores, 95) || contains(scores, 96) || contains(scores, 97) || contains(scores, 98) || contains(scores, 99) || contains(scores, 100))

// ==================================================
// RANDOM FUNCTIONS
// ==================================================
println("\nüé≤ RANDOM FUNCTIONS")
println("===================")

println("Random float (0-1):", rand())
println("Random int (1-6) like dice:", randInt(1, 7))
println("Random int (1-100):", randInt(1, 101))

// ==================================================
// TYPE CHECKING
// ==================================================
println("\nüîç TYPE CHECKING")
println("================")

let testValues = [42, 3.14, "hello", true, [1, 2, 3], {"key": "value"}, null]
let typeNames = ["integer", "float", "string", "boolean", "array", "dictionary", "null"]

for i in range(len(testValues)) {
    let val = testValues[i]
    let typeName = typeNames[i]
    
    println("Value:", val, "(" + typeName + ")")
    println("  isInt:", isInt(val))
    println("  isFloat:", isFloat(val))
    println("  isString:", isString(val))
    println("  isBool:", isBool(val))
    println("  isArray:", isArray(val))
    println("  isDict:", isDict(val))
    println("  isNull:", isNull(val))
    println("")
}

// ==================================================
// PARSING FUNCTIONS
// ==================================================
println("üîß PARSING FUNCTIONS")
println("====================")

let numberStrings = ["123", "-456", "3.14159", "-2.5"]
println("Parsing number strings:", numberStrings)

for str in numberStrings {
    if (contains(str, ".")) {
        println("parseFloat('" + str + "') =", parseFloat(str))
    } else {
        println("parseInt('" + str + "') =", parseInt(str))
    }
}

// ==================================================
// PRACTICAL EXAMPLE
// ==================================================
println("\nüí° PRACTICAL EXAMPLE")
println("====================")

println("Building a simple number analyzer...")

// Generate some random data
let dataset = []
for i in range(10) {
    dataset = append(dataset, randInt(1, 100))
}

println("Dataset:", dataset)
println("Sorted:", sort(dataset))
println("Minimum:", min(dataset[0], dataset[1], dataset[2], dataset[3], dataset[4], dataset[5], dataset[6], dataset[7], dataset[8], dataset[9]))
println("Maximum:", max(dataset[0], dataset[1], dataset[2], dataset[3], dataset[4], dataset[5], dataset[6], dataset[7], dataset[8], dataset[9]))

// Count different ranges
let low = 0, medium = 0, high = 0
for num in dataset {
    if (num < 34) {
        low = low + 1
    } else if (num < 67) {
        medium = medium + 1
    } else {
        high = high + 1
    }
}

println("Distribution analysis:")
println("  Low (1-33):", low, "values")
println("  Medium (34-66):", medium, "values")
println("  High (67-100):", high, "values")

println("\n‚ú® VintLang now has", "28 new built-in functions!", "‚ú®")
println("Happy coding! üöÄ")

// Summary of all new functions
println("\nüìö Complete List of New Functions:")
println("Math: abs, min, max, round, floor, ceil, sqrt")
println("String: upper, lower, trim, contains, startsWith, endsWith")
println("Array: reverse, indexOf, sort, contains")
println("Random: rand, randInt")
println("Parsing: parseInt, parseFloat")
println("Type Checking: isInt, isFloat, isString, isBool, isArray, isDict, isNull")