// Array slicing functionality test
// This test validates the Python-like array slicing syntax

let testArray = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

println("Testing Array Slicing Implementation");
println("====================================");

// Test the original requirement from the issue
let arr = [1, 2, 3, 4, 5];
let result = arr[1:4];
println("arr[1:4] =", result); // Should output: [2, 3, 4]

// Basic slicing tests
println("\nBasic Slicing:");
println("testArray[2:5] =", testArray[2:5]);   // [3, 4, 5]
println("testArray[0:3] =", testArray[0:3]);   // [1, 2, 3]
println("testArray[7:10] =", testArray[7:10]); // [8, 9, 10]

// Partial slicing tests  
println("\nPartial Slicing:");
println("testArray[5:] =", testArray[5:]);     // [6, 7, 8, 9, 10]
println("testArray[:4] =", testArray[:4]);     // [1, 2, 3, 4]
println("testArray[:] =", testArray[:]);       // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// Edge cases
println("\nEdge Cases:");
println("testArray[0:0] =", testArray[0:0]);   // []
println("testArray[5:5] =", testArray[5:5]);   // []
println("testArray[9:10] =", testArray[9:10]); // [10]

// Negative indexing  
println("\nNegative Indexing:");
println("testArray[-3:] =", testArray[-3:]);   // [8, 9, 10]
println("testArray[:-3] =", testArray[:-3]);   // [1, 2, 3, 4, 5, 6, 7]
println("testArray[-5:-2] =", testArray[-5:-2]); // [6, 7, 8]

// Out of bounds handling
println("\nOut of Bounds Handling:");
println("testArray[15:] =", testArray[15:]);   // []
println("testArray[:20] =", testArray[:20]);   // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
println("testArray[-20:] =", testArray[-20:]); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// Verify regular indexing still works
println("\nRegular Indexing Still Works:");
println("testArray[0] =", testArray[0]);       // 1
println("testArray[5] =", testArray[5]);       // 6
println("testArray[9] =", testArray[9]);       // 10

println("\nAll array slicing tests completed successfully!");