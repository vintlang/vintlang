// Enhanced HTTP module test demonstrating new backend features
import http

print("ðŸš€ Enhanced HTTP Module Backend Features Test")
print("=" * 50)

// Test 1: Create app with enhanced features
print("\nâœ“ Test 1 - Enhanced App Creation")
let result = http.app()
print("App creation:", result)

// Test 2: Basic route registration with different HTTP methods
print("\nâœ“ Test 2 - Route Registration")
http.get("/users", func(req, res) {
    print("GET /users - List users")
})

http.post("/users", func(req, res) {
    print("POST /users - Create user")
})

http.put("/users/:id", func(req, res) {
    print("PUT /users/:id - Update user")
})

http.delete("/users/:id", func(req, res) {
    print("DELETE /users/:id - Delete user")
})

// Test 3: Middleware registration
print("\nâœ“ Test 3 - Middleware Registration")
http.use(func(req, res, next) {
    print("Custom middleware - logging request")
})

// Test 4: New Backend Features - Interceptors
print("\nâœ“ Test 4 - Interceptors")
let requestInterceptor = http.interceptor("request", func(req) {
    print("Request interceptor - validating request")
})
print("Request interceptor:", requestInterceptor)

let responseInterceptor = http.interceptor("response", func(res) {
    print("Response interceptor - adding headers")
})
print("Response interceptor:", responseInterceptor)

// Test 5: Guards
print("\nâœ“ Test 5 - Guards")
let authGuard = http.guard(func(req) {
    print("Authentication guard - checking token")
})
print("Auth guard:", authGuard)

let rateLimitGuard = http.guard(func(req) {
    print("Rate limit guard - checking limits")
})
print("Rate limit guard:", rateLimitGuard)

// Test 6: Built-in Middleware
print("\nâœ“ Test 6 - Built-in Middleware")
let corsResult = http.cors()
print("CORS middleware:", corsResult)

let bodyParserResult = http.bodyParser()
print("Body parser middleware:", bodyParserResult)

let authMiddleware = http.auth(func(req, res, next) {
    print("Authentication middleware")
})
print("Auth middleware:", authMiddleware)

// Test 7: Error Handler
print("\nâœ“ Test 7 - Error Handler")
let errorHandler = http.errorHandler(func(err, req, res) {
    print("Global error handler")
})
print("Error handler:", errorHandler)

// Test 8: API Routes with Parameters
print("\nâœ“ Test 8 - API Routes with Parameters")
http.get("/api/users/:id", func(req, res) {
    print("GET /api/users/:id - Get user by ID")
})

http.get("/api/users/:id/posts/:postId", func(req, res) {
    print("GET /api/users/:id/posts/:postId - Get user post")
})

// Test 9: Different content types
print("\nâœ“ Test 9 - Content Type Handlers")
http.post("/api/upload", func(req, res) {
    print("POST /api/upload - File upload handler")
})

http.post("/api/json", func(req, res) {
    print("POST /api/json - JSON data handler")
})

http.post("/api/form", func(req, res) {
    print("POST /api/form - Form data handler")
})

print("\n" + "=" * 50)
print("âœ¨ All enhanced HTTP features registered successfully!")
print("Features demonstrated:")
print("  â€¢ Enhanced request/response objects")
print("  â€¢ Interceptors (request & response)")
print("  â€¢ Guards (authentication, rate limiting)")
print("  â€¢ Built-in middleware (CORS, body parser, auth)")
print("  â€¢ Error handling")
print("  â€¢ Route parameters (/users/:id)")
print("  â€¢ Multiple content type support")
print("  â€¢ Security features")
print("\nðŸŽ¯ Ready for full-fledged backend development!")

// The server would normally be started with:
// http.listen(3000, "Enhanced HTTP server running on port 3000")