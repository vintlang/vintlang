// VintLang Mathematical & Algorithmic Showcase
// Advanced computational demonstrations

import time
import os
import json
import uuid
import math

print("ðŸ§® VintLang Mathematical & Algorithmic Showcase")
print("=" * 60)
print("Demonstrating computational and algorithmic capabilities")
print("=" * 60)

// Algorithm 1: Fibonacci Sequence Generator
print("\nðŸ”¢ Algorithm 1: Fibonacci Sequence")
print("-" * 40)

let fibonacci = func(n) {
    if (n <= 1) {
        return n
    }
    
    let a = 0
    let b = 1
    let sequence = [0, 1]
    
    for i in [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15] {
        if (i <= n) {
            let next = a + b
            sequence.push(next)
            a = b
            b = next
        }
    }
    
    return sequence
}

let fibSequence = fibonacci(15)
print("Fibonacci sequence (first 16 numbers):")
for i, num in fibSequence {
    print("F(" + string(i) + ") = " + string(num))
}

// Algorithm 2: Prime Number Generator
print("\nðŸ”¢ Algorithm 2: Prime Number Detection")
print("-" * 40)

let isPrime = func(n) {
    if (n < 2) {
        return false
    }
    if (n == 2) {
        return true
    }
    if (n % 2 == 0) {
        return false
    }
    
    let i = 3
    while (i * i <= n) {
        if (n % i == 0) {
            return false
        }
        i += 2
    }
    return true
}

let primes = []
let numbers = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]

for num in numbers {
    if (isPrime(num)) {
        primes.push(num)
    }
}

print("Prime numbers up to 30:")
print(string(primes))
print("Found " + string(len(primes)) + " prime numbers")

// Algorithm 3: Factorial Calculator
print("\nðŸ”¢ Algorithm 3: Factorial Calculations")
print("-" * 40)

let factorial = func(n) {
    if (n <= 1) {
        return 1
    }
    return n * factorial(n - 1)
}

let factorials = []
for i in [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] {
    let fact = factorial(i)
    factorials.push({
        "number": i,
        "factorial": fact
    })
    print(string(i) + "! = " + string(fact))
}

// Algorithm 4: Sorting Algorithm (Bubble Sort)
print("\nðŸ”¢ Algorithm 4: Bubble Sort Implementation")
print("-" * 40)

let bubbleSort = func(arr) {
    let sortedArr = arr
    let n = len(sortedArr)
    
    for i in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] {
        if (i < n - 1) {
            for j in [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] {
                if (j < n - i - 1) {
                    if (sortedArr[j] > sortedArr[j + 1]) {
                        let temp = sortedArr[j]
                        sortedArr[j] = sortedArr[j + 1]
                        sortedArr[j + 1] = temp
                    }
                }
            }
        }
    }
    
    return sortedArr
}

let unsortedArray = [64, 34, 25, 12, 22, 11, 90, 88, 76, 50]
print("Original array: " + string(unsortedArray))
let sortedArray = bubbleSort(unsortedArray)
print("Sorted array:   " + string(sortedArray))

// Algorithm 5: Number Theory - GCD Calculator
print("\nðŸ”¢ Algorithm 5: Greatest Common Divisor")
print("-" * 40)

let gcd = func(a, b) {
    while (b != 0) {
        let temp = b
        b = a % b
        a = temp
    }
    return a
}

let numberPairs = [
    {"a": 48, "b": 18},
    {"a": 56, "b": 42},
    {"a": 72, "b": 27},
    {"a": 100, "b": 75}
]

for pair in numberPairs {
    let result = gcd(pair["a"], pair["b"])
    print("GCD(" + string(pair["a"]) + ", " + string(pair["b"]) + ") = " + string(result))
}

// Algorithm 6: Mathematical Constants and Calculations
print("\nðŸ”¢ Algorithm 6: Mathematical Constants")
print("-" * 40)

print("Mathematical constants:")
print("PI â‰ˆ " + string(math.PI()))

// Calculate circle properties
let radius = 5
let circumference = 2 * math.PI() * radius
let area = math.PI() * radius * radius

print("For a circle with radius " + string(radius) + ":")
print("  Circumference = " + string(circumference))
print("  Area = " + string(area))

// Algorithm 7: Data Analysis and Statistics
print("\nðŸ“Š Algorithm 7: Statistical Analysis")
print("-" * 40)

let dataset = [23, 45, 67, 89, 12, 34, 56, 78, 90, 21, 43, 65, 87, 10, 32]

// Calculate mean
let sum = 0
for value in dataset {
    sum += value
}
let mean = sum / len(dataset)

// Find min and max
let min = dataset[0]
let max = dataset[0]
for value in dataset {
    if (value < min) {
        min = value
    }
    if (value > max) {
        max = value
    }
}

print("Dataset: " + string(dataset))
print("Count: " + string(len(dataset)))
print("Sum: " + string(sum))
print("Mean: " + string(mean))
print("Min: " + string(min))
print("Max: " + string(max))
print("Range: " + string(max - min))

// Algorithm 8: Data Structure Operations
print("\nðŸ”¢ Algorithm 8: Data Structure Demonstrations")
print("-" * 40)

// Stack simulation using array
let stack = []
let stackOperations = ["push(10)", "push(20)", "push(30)", "pop()", "push(40)", "pop()"]

print("Stack operations:")
for operation in stackOperations {
    if (operation.contains("push")) {
        let value = 10
        if (operation.contains("20")) {
            value = 20
        } else if (operation.contains("30")) {
            value = 30
        } else if (operation.contains("40")) {
            value = 40
        }
        stack.push(value)
        print("  " + operation + " -> Stack: " + string(stack))
    } else if (operation.contains("pop")) {
        if (len(stack) > 0) {
            stack.pop()
            print("  " + operation + " -> Stack: " + string(stack))
        }
    }
}

// Comprehensive Report Generation
print("\nðŸ“‹ Generating Comprehensive Mathematical Report")
print("-" * 50)

let mathReport = {
    "report_id": uuid.generate(),
    "generated_at": time.format(time.now(), "2006-01-02 15:04:05"),
    "algorithms_demonstrated": [
        "Fibonacci Sequence Generation",
        "Prime Number Detection",
        "Factorial Calculation",
        "Bubble Sort Algorithm",
        "Greatest Common Divisor",
        "Mathematical Constants",
        "Statistical Analysis",
        "Data Structure Operations"
    ],
    "results": {
        "fibonacci_sequence": fibSequence,
        "prime_numbers": primes,
        "factorials": factorials,
        "sorted_array": sortedArray,
        "gcd_calculations": numberPairs,
        "statistics": {
            "dataset": dataset,
            "mean": mean,
            "min": min,
            "max": max,
            "count": len(dataset)
        }
    },
    "performance_metrics": {
        "algorithms_executed": 8,
        "calculations_performed": len(fibSequence) + len(primes) + len(factorials) + len(dataset),
        "data_points_processed": len(dataset) + len(unsortedArray) + len(fibSequence)
    }
}

let reportFile = "mathematical_analysis_" + time.format(time.now(), "2006-01-02_15-04-05") + ".json"
os.writeFile(reportFile, json.encode(mathReport))
print("âœ“ Comprehensive mathematical report saved to: " + reportFile)

// Generate text summary
let textSummary = "VINTLANG MATHEMATICAL & ALGORITHMIC SHOWCASE\n"
textSummary += "Generated: " + time.format(time.now(), "02-01-2006 15:04:05") + "\n"
textSummary += "=" * 60 + "\n\n"

textSummary += "ALGORITHMS DEMONSTRATED:\n"
for algo in mathReport["algorithms_demonstrated"] {
    textSummary += "  âœ“ " + algo + "\n"
}

textSummary += "\nKEY RESULTS:\n"
textSummary += "  â€¢ Fibonacci sequence calculated up to F(15)\n"
textSummary += "  â€¢ Found " + string(len(primes)) + " prime numbers up to 30\n"
textSummary += "  â€¢ Calculated factorials from 1! to 10!\n"
textSummary += "  â€¢ Sorted array of " + string(len(sortedArray)) + " elements\n"
textSummary += "  â€¢ Analyzed dataset of " + string(len(dataset)) + " values\n"
textSummary += "  â€¢ Demonstrated stack operations\n"

textSummary += "\nSTATISTICAL SUMMARY:\n"
textSummary += "  â€¢ Dataset mean: " + string(mean) + "\n"
textSummary += "  â€¢ Dataset range: " + string(min) + " to " + string(max) + "\n"
textSummary += "  â€¢ Total calculations: " + string(mathReport["performance_metrics"]["calculations_performed"]) + "\n"

let summaryFile = "math_summary_" + time.format(time.now(), "2006-01-02_15-04-05") + ".txt"
os.writeFile(summaryFile, textSummary)
print("âœ“ Summary report saved to: " + summaryFile)

// Final Results
print("\nðŸŽ‰ Mathematical Showcase Complete!")
print("-" * 50)

print("ðŸ“Š COMPUTATIONAL ACHIEVEMENTS:")
print("  â€¢ Algorithms implemented: " + string(len(mathReport["algorithms_demonstrated"])))
print("  â€¢ Mathematical calculations: " + string(mathReport["performance_metrics"]["calculations_performed"]))
print("  â€¢ Data points processed: " + string(mathReport["performance_metrics"]["data_points_processed"]))
print("  â€¢ Prime numbers found: " + string(len(primes)))
print("  â€¢ Fibonacci numbers calculated: " + string(len(fibSequence)))

print("\nâœ¨ VINTLANG MATHEMATICAL CAPABILITIES:")
print("  âœ“ Recursive algorithms (Fibonacci, Factorial)")
print("  âœ“ Iterative algorithms (Prime detection, Sorting)")
print("  âœ“ Mathematical calculations (GCD, Statistics)")
print("  âœ“ Data structure operations (Stack, Array)")
print("  âœ“ Number theory implementations")
print("  âœ“ Statistical analysis functions")
print("  âœ“ Algorithm complexity handling")

print("\nðŸš€ VintLang is excellent for:")
print("  â€¢ Mathematical computing")
print("  â€¢ Algorithm implementation")
print("  â€¢ Data analysis and statistics")
print("  â€¢ Educational programming")
print("  â€¢ Scientific calculations")
print("  â€¢ Computational problem solving")

print("\nðŸŽ¯ This demonstrates VintLang's power for")
print("   computational and mathematical applications!")

print("\n" + "=" * 60)
print("ðŸ§® Mathematical Showcase Complete!")
print("=" * 60)